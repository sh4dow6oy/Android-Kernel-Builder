name: Build Samsung Kernel (LLVM 10 + Cache)

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Device model (e.g., g770f)'
        required: true
        default: g770f
      branch:
        description: 'Kernel branch to build'
        required: true
        default: SM-G770F

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
      # 1Ô∏è‚É£ Checkout kernel source
      - name: Checkout kernel
        uses: actions/checkout@v3
        with:
          repository: sh4dow6oy/samsung_kernel
          ref: ${{ github.event.inputs.branch }}
          path: kernel

      # 2Ô∏è‚É£ Install build dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang make git bc bison flex libssl-dev libncurses5-dev libelf-dev python2 wget tar xz-utils unzip

      # 3Ô∏è‚É£ Setup Python2
      - name: Setup Python2
        run: |
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
          sudo update-alternatives --set python /usr/bin/python2

      # 4Ô∏è‚É£ Cache LLVM 10 prebuilt
      - name: Cache LLVM 10
        uses: actions/cache@v3
        with:
          path: kernel/toolchain/llvm/clang-r363841c
          key: llvm-10-cache-v1

      # 5Ô∏è‚É£ Download LLVM if cache missed
      - name: Setup LLVM 10 toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          TOOLCHAIN_PATH="$PWD/kernel/toolchain/llvm"
          mkdir -p "$TOOLCHAIN_PATH"
          wget -qO llvm.tar.xz "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android10/clang-r363841c.tar.xz?format=tar"
          tar xf llvm.tar.xz -C "$TOOLCHAIN_PATH"
          ls -l $TOOLCHAIN_PATH/clang-r363841c/bin/clang
          echo "LLVM 10 toolchain ready"

      # 6Ô∏è‚É£ Set PATH for all steps
      - name: Add LLVM to PATH
        run: |
          echo "PATH=$PWD/kernel/toolchain/llvm/clang-r363841c/bin:$PATH" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Detect defconfig automatically
      - name: Detect defconfig
        id: detect-config
        run: |
          MODEL=${{ github.event.inputs.model }}
          DEFCONFIG=$(ls kernel/arch/arm64/configs/*_${MODEL}_defconfig 2>/dev/null || ls kernel/arch/arm64/configs/*_defconfig | head -n 1)
          echo "Using defconfig: $DEFCONFIG"
          echo "DEFCONFIG_NAME=$(basename $DEFCONFIG)" >> $GITHUB_OUTPUT

      # 8Ô∏è‚É£ Clean output folder
      - name: Clean output folder
        run: rm -rf kernel/out

      # 9Ô∏è‚É£ Configure kernel
      - name: Configure kernel
        run: |
          make O=out ARCH=arm64 ${{ steps.detect-config.outputs.DEFCONFIG_NAME }}
        working-directory: ./kernel

      # üîü Build kernel using LLVM
      - name: Build kernel
        run: |
          make O=out ARCH=arm64 CC=clang -j$(nproc)
        working-directory: ./kernel

      # 1Ô∏è‚É£1Ô∏è‚É£ Upload kernel image
      - name: Upload kernel image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image.gz-dtb
