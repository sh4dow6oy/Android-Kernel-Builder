name: Build Android Kernel

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'Device model (ex: g770f)'
        required: true
        default: g770f

jobs:
  build-kernel:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2️⃣ Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang make gcc git bc bison flex libssl-dev libncurses5-dev libelf-dev wget tar

    # 3️⃣ Setup LLVM & GCC toolchains
    - name: Setup LLVM & GCC toolchains
      run: |
        # LLVM / Clang
        LLVM_PATH="$PWD/kernel/toolchain/llvm"
        mkdir -p "$LLVM_PATH"
        wget -O llvm.tar.xz "https://github.com/kdrag0n/proton-clang/releases/download/10.0.0/clang-r363841c.tar.xz"
        tar -xf llvm.tar.xz -C "$LLVM_PATH"
        export PATH="$LLVM_PATH/clang-r363841c/bin:$PATH"
        export CC=clang
        echo "LLVM toolchain ready"

        # GCC AArch64
        GCC_PATH="$PWD/kernel/toolchain/gcc"
        mkdir -p "$GCC_PATH"
        wget -O gcc-aarch64.tar.gz "https://github.com/kdrag0n/proton-clang/releases/download/10.0.0/gcc-aarch64-linux-android-4.9.tar.gz"
        tar -xf gcc-aarch64.tar.gz -C "$GCC_PATH"
        export PATH="$GCC_PATH/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin:$PATH"
        export CROSS_COMPILE=aarch64-linux-android-
        echo "GCC toolchain ready"

        # Persist variables for next steps
        echo "PATH=$PATH" >> $GITHUB_ENV
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CROSS_COMPILE=$CROSS_COMPILE" >> $GITHUB_ENV

    # 4️⃣ Detect defconfig
    - name: Detect defconfig
      id: detect-config
      run: |
        MODEL=${{ github.event.inputs.model }}
        DEFCONFIG=$(ls kernel/arch/arm64/configs/*_${MODEL}_defconfig 2>/dev/null || ls kernel/arch/arm64/configs/*_defconfig | head -n 1)
        if [ -z "$DEFCONFIG" ]; then
          echo "Error: No defconfig found for model $MODEL"
          exit 1
        fi
        echo "Using defconfig: $DEFCONFIG"
        echo "DEFCONFIG_NAME=$(basename $DEFCONFIG)" >> $GITHUB_OUTPUT

    # 5️⃣ Clean output folder
    - name: Clean output folder
      run: rm -rf kernel/out

    # 6️⃣ Configure kernel
    - name: Configure kernel
      run: make O=out ARCH=arm64 ${{ steps.detect-config.outputs.DEFCONFIG_NAME }} CC=$CC CROSS_COMPILE=$CROSS_COMPILE
      working-directory: ./kernel

    # 7️⃣ Build kernel
    - name: Build kernel
      run: make O=out ARCH=arm64 CC=$CC CROSS_COMPILE=$CROSS_COMPILE -j$(nproc)
      working-directory: ./kernel

    # 8️⃣ Upload kernel image
    - name: Upload kernel image
      uses: actions/upload-artifact@v4
      with:
        name: kernel-image
        path: kernel/out/arch/arm64/boot/Image.gz-dtb
